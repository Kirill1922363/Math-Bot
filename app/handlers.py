from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import math
from .math_logic import MathForm,calculate_expression

from .keyboards import math_menu_keyboard,geometric_calculator_keyboard,BUTTON_CALCULATE,GEOMETRIC_CALCULATOR

router = Router()

class GeometryStates(StatesGroup):
    waiting_radius = State()
    waiting_rectangle_sides = State()
    waiting_triangle_params = State()



@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:\n"
        "+ –¥–æ–¥–∞–≤–∞–Ω–Ω—è\n- –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è\n* –º–Ω–æ–∂–µ–Ω–Ω—è\n/ –¥—ñ–ª–µ–Ω–Ω—è\n^ —Å—Ç–µ–ø—ñ–Ω—å\n\n"
        "–ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
        "–ü–ª–æ—â–∞ –∫–æ–ª–∞: S = œÄ * r¬≤\n"
        "–î–æ–≤–∂–∏–Ω–∞ –∫–æ–ª–∞: P = 2 * œÄ * r\n"
        "–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞: S = a * b\n"
        "–ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞: P = 2 * (a + b)\n"
        "–ü–ª–æ—â–∞ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞: S = (a * h) / 2\n"
        "–§—É–Ω–∫—Ü—ñ—ó: sin(), cos(), tan()\n"
    )
    await message.answer(help_text)

@router.message(F.text == BUTTON_CALCULATE)
async def start_calculation(message: Message, state: FSMContext):
    await state.set_state(MathForm.expression)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(F.text == GEOMETRIC_CALCULATOR)
@router.message(Command("geometric_calculator"))
async def cmd_geometric_calculator(message: Message):
    await message.answer(
        "üìê <b>–ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>",
        reply_markup=geometric_calculator_keyboard()
    )

@router.message(F.text == "–ü–ª–æ—â–∞ –∫–æ–ª–∞ ‚≠ï")
async def cmd_circle_area(message: Message, state: FSMContext):
    await state.set_state(GeometryStates.waiting_radius)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä–∞–¥—ñ—É—Å –∫–æ–ª–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(GeometryStates.waiting_radius)
async def process_circle_area(message: Message, state: FSMContext):
    try:
        radius = float(message.text)
        area = math.pi * radius ** 2
        await message.answer(
            f"üî∑ –ü–ª–æ—â–∞ –∫–æ–ª–∞ –∑ —Ä–∞–¥—ñ—É—Å–æ–º {radius}: <b>{area:.2f}</b>cm^2",
            reply_markup=geometric_calculator_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")

@router.message(F.text == "–î–æ–≤–∂–∏–Ω–∞ –∫–æ–ª–∞ ‚≠ï")
async def cmd_circle_perimeter(message: Message, state: FSMContext):
    await state.set_state(GeometryStates.waiting_radius)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ä–∞–¥—ñ—É—Å –∫–æ–ª–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(GeometryStates.waiting_radius)
async def process_circle_perimeter(message: Message, state: FSMContext):
    try:
        radius = float(message.text)
        perimeter = 2 * math.pi * radius
        await message.answer(
            f"üîµ –î–æ–≤–∂–∏–Ω–∞ –∫–æ–ª–∞ –∑ —Ä–∞–¥—ñ—É—Å–æ–º {radius}: <b>{perimeter:.2f}</b>cm",
            reply_markup=geometric_calculator_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ!")

@router.message(F.text == "–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ üü¶")
async def cmd_rectangle_area(message: Message, state: FSMContext):
    await state.set_state(GeometryStates.waiting_rectangle_sides)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É —Ç–∞ —à–∏—Ä–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:", reply_markup=ReplyKeyboardRemove())

@router.message(GeometryStates.waiting_rectangle_sides)
async def process_rectangle_area(message: Message, state: FSMContext):
    try:
        a, b = map(float, message.text.split())
        area = a * b
        await message.answer(
            f"üü¶ –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ {a}√ó{b}: <b>{area:.2f}</b>cm^2",
            reply_markup=geometric_calculator_keyboard()
        )
        await state.clear()
    except:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª!")

@router.message(F.text == "–ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ üü¶")
async def cmd_rectangle_perimeter(message: Message, state: FSMContext):
    await state.set_state(GeometryStates.waiting_rectangle_sides)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É —Ç–∞ —à–∏—Ä–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:", reply_markup=ReplyKeyboardRemove())

@router.message(GeometryStates.waiting_rectangle_sides)
async def process_rectangle_perimeter(message: Message, state: FSMContext):
    try:
        a, b = map(float, message.text.split())
        perimeter = 2 * (a + b)
        await message.answer(
            f"üüß –ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ {a}√ó{b}: <b>{perimeter:.2f}</b>cm",
            reply_markup=geometric_calculator_keyboard()
        )
        await state.clear()
    except:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª!")

@router.message(F.text == "–ü–ª–æ—â–∞ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ üî∫")
async def cmd_triangle_area(message: Message, state: FSMContext):
    await state.set_state(GeometryStates.waiting_triangle_params)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ—Å–Ω–æ–≤—É —Ç–∞ –≤–∏—Å–æ—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:", reply_markup=ReplyKeyboardRemove())

@router.message(GeometryStates.waiting_triangle_params)
async def process_triangle_area(message: Message, state: FSMContext):
    try:
        a, h = map(float, message.text.split())
        area = (a * h) / 2
        await message.answer(
            f"üî∫ –ü–ª–æ—â–∞ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ (–æ—Å–Ω–æ–≤–∞ {a}, –≤–∏—Å–æ—Ç–∞ {h}): <b>{area:.2f}</b>cm^2",
            reply_markup=geometric_calculator_keyboard()
        )
        await state.clear()
    except:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª!")

@router.message(F.text == "–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
async def cmd_back(message: Message):
    await message.answer(
        "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        reply_markup=math_menu_keyboard()
    )


@router.message(F.text & ~F.text.startswith("/"))
async def handle_all_text_messages(message: Message):
    if any(char in message.text for char in "+-*/^()"):
        result = calculate_expression(message.text)
        await message.answer(result, reply_markup=math_menu_keyboard())
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ä–∞–∑ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help")
